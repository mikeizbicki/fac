"vocab/$FILE.md":
  prompt_file: vocab/$FILE.prompt
  variables:
    FILE: |
      ls vocab | grep '\.prompt$' | sed 's/.prompt$//' | tr '\n' '\0'
    NUM_WORDS:
      echo 50

"grammar/vignette.jsonl":
  schema_file: grammar/vignette.json-schema
  dependencies: |
    about
    characters/*/about.json

"grammar/grammar.jsonl":
  schema_file: grammar/grammar.json-schema

"vignette_ideas.jsonl":
  schema_file: vignette_ideas.json-schema
  dependencies: |
    about
    characters/*/about.json
    vocab/*.md

"vignettes/$VIG.json":
  schema_file: vignettes/vignette.json-schema
  dependencies: |
    about
    characters/*/about.json
    vignettes/$VIG.prompt
  variables:
    VIG: |
      ls vocab | grep '\.prompt$' | sed 's/.prompt$//' | tr '\n' '\0'

####################

"$STORY/outline.json":
  schema_file: prompts/outline.json-schema
  dependencies: |
    prompts/story_structures/freytag
    about
    $STORY/about
    characters/*/about.json

"$STORY/locations.json":
  prompt_file: prompts/locations
  dependencies: |
    prompts/story_structures/freytag
    about
    $STORY/about
    $STORY/outline.json
    characters/*/about.json

"$STORY/scenes/$LOCATION.png":
  prompt_file: prompts/scene_png
  filetype: image
  dependencies: |
    $STORY/locations.json
  variables:
    LOCATION: |
      jq -r '.[].sublocations[].name' $STORY/locations.json | tr '\n' '\0'

"$STORY/chapter$CHAPTER/vocab.md":
  prompt:
    Prepare the list of vocabulary to introduce in chapter $CHAPTER.
    The vocabulary should be simple.
    Young children should be able to understand the meaning of the vocab through context.
    Whenever possible, restrict your vocabulary to only biblical hebrew provided in the 'hebrew/vocabulary.md' file, and introduce related terms at the same time.
    Each chapter should introduce at most 10 new words.

    Format the output in markdown tables, one table for each part of speech.
    Do not provide transliterations, but do provide English glosses.

    The text of the chapter is
    $CHAPTER_TEXT
  dependencies: |
    about
    hebrew/vocabulary.md
    $STORY/about
  variables:
    CHAPTER: |
      jq -r 'range(0; .chapters | length)' $STORY/outline.json | tr '\n' '\0'
    CHAPTER_TEXT: |
      jq ".chapters[$CHAPTER]" $STORY/outline.json

"$STORY/chapter$CHAPTER/chapter.json":
  prompt_file: prompts/chapter
  dependencies: |
    about
    $STORY/about
    $STORY/outline.json
    $STORY/locations.json
    $STORY/chapter$CHAPTER/vocab.md
    characters/*/about.json
  variables:
    CHAPTER: |
      jq -r 'range(0; .chapters | length)' $STORY/outline.json | tr '\n' '\0'
    CHAPTER_TEXT: |
      jq ".chapters[$CHAPTER]" $STORY/outline.json

"$STORY/chapter$CHAPTER/section$SECTION/blocking.json":
  prompt_file: prompts/blocking
  dependencies: |
    about
    $STORY/about
    $STORY/outline.json
    $STORY/locations.json
    characters/*/about.json
    $STORY/chapter$CHAPTER/chapter.json
  variables:
    CHAPTER: |
      jq -r 'range(0; .chapters | length)' $STORY/outline.json | tr '\n' '\0'
    CHAPTER_PATH: |
      echo $STORY/chapter$CHAPTER/chapter.json
    SECTION: |
      jq -r 'range(0; .sections | length)' $STORY/chapter$CHAPTER/chapter.json | tr '\n' '\0'
    PREV_SECTION: |
      echo $(($(bc <<< "scale=0; $SECTION") - 1))
    SECTION_TEXT: |
      jq ".sections[$SECTION]" $STORY/chapter$CHAPTER/chapter.json

"$STORY/text.md":
  cmd: ./scripts/gen_markdown.py "$STORY/"
  dependencies: |
    $STORY/chapter$CHAPTER/chapter.json

"$STORY/text.html":
  cmd: ./scripts/gen_html.sh "$STORY/text.md"
  dependencies: |
    $STORY/text.md
